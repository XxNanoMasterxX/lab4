
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000023a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000775  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066e  00000000  00000000  00000b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037f  00000000  00000000  0000118b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000389  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fd  00000000  00000000  00001951  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  9e:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:

void initADC()
{
	ADMUX = 0;
	ADMUX |= (1 << REFS0); //referencia = avcc
	ADMUX |= (1 << ADLAR);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1 << MUX1) | (1 << MUX0); // ACtivando ADC3
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADCSRA = 0;
  b8:	80 81       	ld	r24, Z
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
	ADCSRA |= (1 << ADIE);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0);
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
	
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  d0:	80 81       	ld	r24, Z
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	80 83       	st	Z, r24
}
/****************************************/
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <setup>:
/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
	DDRD	= 0xff;
  de:	cf 93       	push	r28
	DDRB	= 0Xff;
  e0:	f8 94       	cli
	PORTD	= 0x00;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a b9       	out	0x0a, r24	; 10
	PORTB	= 0x01;
  e6:	84 b9       	out	0x04, r24	; 4
	
  e8:	1b b8       	out	0x0b, r1	; 11
	
  ea:	c1 e0       	ldi	r28, 0x01	; 1
  ec:	c5 b9       	out	0x05, r28	; 5
	
	
	initADC();
	DDRC	= 0x00;
	PORTC	|= 0x07;
  ee:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
  f2:	17 b8       	out	0x07, r1	; 7
	PCICR	= 0x02;
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	88 b9       	out	0x08, r24	; 8
	PCMSK1	= 0b00000011;
	cuenta8bit = 0x00;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	
 106:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
	CLKPR = (1 << CLKPCE);
	CLKPR = (1 << CLKPS2); // Prescales principal = 16
	TCCR0A	= 0X00;
 10a:	e1 e6       	ldi	r30, 0x61	; 97
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 e8       	ldi	r25, 0x80	; 128
 110:	90 83       	st	Z, r25
	TCCR0B	= (1 << CS01) | (1 << CS00);
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	90 83       	st	Z, r25
	TCNT0 = 178;
 116:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = (1 << TOIE0);
 118:	85 bd       	out	0x25, r24	; 37
	//counter_10ms = 0;
 11a:	82 eb       	ldi	r24, 0xB2	; 178
 11c:	86 bd       	out	0x26, r24	; 38
	
 11e:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	test = 0b00111111;
	ADCDec = 0;
	ADCDig = 0;
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <test>
	sei();
 128:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ADCDec>
}
 12c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ADCDig>

 130:	78 94       	sei
void initADC()
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <main>:
/****************************************/
// Main Function
int main(void)
{
	setup();
	while (1)
 136:	0e 94 6f 00 	call	0xde	; 0xde <setup>
	{
		if (PORTB == 0x04) {
			PORTD = cuenta8bit;
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	19 f4       	brne	.+6      	; 0x146 <main+0x10>
		}
 140:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 144:	8b b9       	out	0x0b, r24	; 11
		if (PORTB == 0x01)
		{
 146:	85 b1       	in	r24, 0x05	; 5
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	19 f4       	brne	.+6      	; 0x152 <main+0x1c>
			PORTD = ADCDec;
		}
 14c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <ADCDec>
 150:	8b b9       	out	0x0b, r24	; 11
		if (PORTB == 0x02)
		{
 152:	85 b1       	in	r24, 0x05	; 5
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	89 f7       	brne	.-30     	; 0x13a <main+0x4>
			PORTD = ADCDig;
		}
 158:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ADCDig>
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	ed cf       	rjmp	.-38     	; 0x13a <main+0x4>

00000160 <__vector_4>:
}
/****************************************/
// Interrupt routines
ISR(PCINT1_vect){
		if (PINC & (1<<0))
		{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
			cuenta8bit++;
 16c:	30 9b       	sbis	0x06, 0	; 6
 16e:	05 c0       	rjmp	.+10     	; 0x17a <__vector_4+0x1a>
		}
		if (PINC & (1<<1))
 170:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		{
			cuenta8bit--;
 17a:	31 9b       	sbis	0x06, 1	; 6
 17c:	05 c0       	rjmp	.+10     	; 0x188 <__vector_4+0x28>
		}
	
 17e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 182:	81 50       	subi	r24, 0x01	; 1
 184:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	
}

ISR(TIMER0_OVF_vect)
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_16>:
{
	TCNT0 = 178;
	//counter_10ms++;
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
		//counter_10ms = 0;
 1a0:	82 eb       	ldi	r24, 0xB2	; 178
 1a2:	86 bd       	out	0x26, r24	; 38
		PORTB = PORTB * 2;
		if (PORTB == 8)
		{
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	88 0f       	add	r24, r24
 1a8:	85 b9       	out	0x05, r24	; 5
			PORTB = 0x01;
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	88 30       	cpi	r24, 0x08	; 8
 1ae:	11 f4       	brne	.+4      	; 0x1b4 <__vector_16+0x20>
		}
	
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	85 b9       	out	0x05, r24	; 5
	
}

ISR(ADC_vect)
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_21>:
{
	test = ADCH;
	ADCDig = test & 0x0F;
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	ADCDig = SieteSeg[ADCDig];
 1d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1d6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <test>
	ADCDec = test & 0xF0;
 1da:	e8 2f       	mov	r30, r24
 1dc:	ef 70       	andi	r30, 0x0F	; 15
	ADCDec = ADCDec / 16;
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	e0 50       	subi	r30, 0x00	; 0
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	90 81       	ld	r25, Z
 1ea:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <ADCDig>
	ADCDec = SieteSeg[ADCDec];
	
 1ee:	e8 2f       	mov	r30, r24
 1f0:	e2 95       	swap	r30
 1f2:	ef 70       	andi	r30, 0x0F	; 15
	if (test > cuenta8bit)
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e0 50       	subi	r30, 0x00	; 0
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	90 81       	ld	r25, Z
 200:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADCDec>
	{
		PORTC |= 0b00000100;
 204:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 208:	98 17       	cp	r25, r24
 20a:	20 f4       	brcc	.+8      	; 0x214 <__vector_21+0x54>
	}
	else
 20c:	88 b1       	in	r24, 0x08	; 8
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	88 b9       	out	0x08, r24	; 8
 212:	03 c0       	rjmp	.+6      	; 0x21a <__vector_21+0x5a>
	{
		PORTC &= 0b11111011;
	}
	
 214:	88 b1       	in	r24, 0x08	; 8
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	88 b9       	out	0x08, r24	; 8
	ADCSRA |= (1 << ADSC);
}

 21a:	ea e7       	ldi	r30, 0x7A	; 122
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 64       	ori	r24, 0x40	; 64
 222:	80 83       	st	Z, r24

 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
